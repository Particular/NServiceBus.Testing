[assembly: System.CLSCompliant(false)]
[assembly: System.Runtime.InteropServices.ComVisible(false)]
namespace NServiceBus.Testing
{
    [System.Obsolete("Use the arrange act assert (AAA) syntax instead. Please see the upgrade guide for" +
        " more details. Will be removed in version 9.0.0.", true)]
    public class ExpectationException : System.Exception
    {
        public ExpectationException() { }
    }
    [System.Obsolete("Use the arrange act assert (AAA) syntax instead. Please see the upgrade guide for" +
        " more details. Will be removed in version 9.0.0.", true)]
    public class Handler<T>
    {
        public Handler() { }
    }
    public static class OutgoingMessageExtensions
    {
        public static System.Collections.Generic.IEnumerable<NServiceBus.Testing.PublishedMessage<TMessage>> Containing<TMessage>(this System.Collections.Generic.IEnumerable<NServiceBus.Testing.PublishedMessage<object>> publishedMessages) { }
        public static System.Collections.Generic.IEnumerable<NServiceBus.Testing.RepliedMessage<TMessage>> Containing<TMessage>(this System.Collections.Generic.IEnumerable<NServiceBus.Testing.RepliedMessage<object>> repliedMessages) { }
        public static System.Collections.Generic.IEnumerable<NServiceBus.Testing.SentMessage<TMessage>> Containing<TMessage>(this System.Collections.Generic.IEnumerable<NServiceBus.Testing.SentMessage<object>> sentMessages) { }
        public static TMessage Message<TMessage>(this NServiceBus.Testing.PublishedMessage<object> sentMessage)
            where TMessage :  class { }
        public static TMessage Message<TMessage>(this NServiceBus.Testing.RepliedMessage<object> sentMessage)
            where TMessage :  class { }
        public static TMessage Message<TMessage>(this NServiceBus.Testing.SentMessage<object> sentMessage)
            where TMessage :  class { }
    }
    public class OutgoingMessage<TMessage, TOptions>
        where TOptions : NServiceBus.Extensibility.ExtendableOptions
    {
        protected OutgoingMessage(TMessage message, TOptions options) { }
        public TMessage Message { get; }
        public TOptions Options { get; }
    }
    public class PublishedMessage<TMessage> : NServiceBus.Testing.OutgoingMessage<TMessage, NServiceBus.PublishOptions>
    {
        public PublishedMessage(TMessage message, NServiceBus.PublishOptions options) { }
    }
    [System.Diagnostics.DebuggerDisplay("QueuedSagaMessage: {Message}")]
    public class QueuedSagaMessage
    {
        public System.Collections.Generic.IReadOnlyDictionary<string, string> Headers { get; }
        public object Message { get; }
        public System.Type Type { get; }
    }
    public class RepliedMessage<TMessage> : NServiceBus.Testing.OutgoingMessage<TMessage, NServiceBus.ReplyOptions>
    {
        public RepliedMessage(TMessage message, NServiceBus.ReplyOptions options) { }
    }
    [System.Obsolete("Use the arrange act assert (AAA) syntax instead. Please see the upgrade guide for" +
        " more details. Will be removed in version 9.0.0.", true)]
    public class Saga<T>
    {
        public Saga() { }
    }
    public class SentMessage<TMessage> : NServiceBus.Testing.OutgoingMessage<TMessage, NServiceBus.SendOptions>
    {
        public SentMessage(TMessage message, NServiceBus.SendOptions options) { }
    }
    public class Subscription : NServiceBus.Testing.OutgoingMessage<System.Type, NServiceBus.SubscribeOptions>
    {
        public Subscription(System.Type message, NServiceBus.SubscribeOptions options) { }
    }
    [System.Obsolete("Use the arrange act assert (AAA) syntax instead. Please see the upgrade guide for" +
        " more details. Will be removed in version 9.0.0.", true)]
    public class Test
    {
        public Test() { }
    }
    public class TestableAuditContext : NServiceBus.Testing.TestableBehaviorContext, NServiceBus.Extensibility.IExtendable, NServiceBus.ICancellableContext, NServiceBus.Pipeline.IAuditActionContext, NServiceBus.Pipeline.IAuditContext, NServiceBus.Pipeline.IBehaviorContext
    {
        public TestableAuditContext() { }
        [System.Obsolete("Use `AuditMetadata` instead. Will be removed in version 9.0.0.", true)]
        public System.Collections.Generic.Dictionary<string, string> AddedAuditData { get; }
        public NServiceBus.Audit.AuditAction AuditAction { get; set; }
        public string AuditAddress { get; set; }
        public System.Collections.Generic.Dictionary<string, string> AuditMetadata { get; set; }
        public bool IsLocked { get; }
        public NServiceBus.Transport.OutgoingMessage Message { get; set; }
        public System.TimeSpan? TimeToBeReceived { get; }
        [System.Obsolete("Use `AuditMetadata` instead. Will be removed in version 9.0.0.", true)]
        public void AddAuditData(string key, string value) { }
        public NServiceBus.Pipeline.IAuditActionContext PreventChanges() { }
    }
    public class TestableBatchDispatchContext : NServiceBus.Testing.TestableBehaviorContext, NServiceBus.Extensibility.IExtendable, NServiceBus.ICancellableContext, NServiceBus.Pipeline.IBatchDispatchContext, NServiceBus.Pipeline.IBehaviorContext
    {
        public TestableBatchDispatchContext() { }
        public System.Collections.Generic.IList<NServiceBus.Transport.TransportOperation> Operations { get; set; }
    }
    public abstract class TestableBehaviorContext : NServiceBus.Extensibility.IExtendable, NServiceBus.ICancellableContext, NServiceBus.Pipeline.IBehaviorContext
    {
        protected TestableBehaviorContext() { }
        public System.Threading.CancellationToken CancellationToken { get; set; }
        public NServiceBus.Extensibility.ContextBag Extensions { get; set; }
        public Microsoft.Extensions.DependencyInjection.IServiceCollection ServiceCollection { get; set; }
        protected virtual System.IServiceProvider GetBuilder() { }
    }
    public class TestableDispatchContext : NServiceBus.Testing.TestableBehaviorContext, NServiceBus.Extensibility.IExtendable, NServiceBus.ICancellableContext, NServiceBus.Pipeline.IBehaviorContext, NServiceBus.Pipeline.IDispatchContext
    {
        public TestableDispatchContext() { }
        public System.Collections.Generic.IList<NServiceBus.Transport.TransportOperation> Operations { get; set; }
    }
    public class TestableEndpointInstance : NServiceBus.Testing.TestableMessageSession, NServiceBus.IEndpointInstance, NServiceBus.IMessageSession
    {
        public TestableEndpointInstance() { }
        public bool EndpointStopped { get; }
        public virtual System.Threading.Tasks.Task Stop(System.Threading.CancellationToken cancellationToken = default) { }
    }
    [System.Obsolete("Forwarding functionality has been removed from NServiceBus. Will be removed in ve" +
        "rsion 9.0.0.", true)]
    public class TestableForwardingContext
    {
        public TestableForwardingContext() { }
    }
    public abstract class TestableIncomingContext : NServiceBus.Testing.TestableMessageProcessingContext, NServiceBus.Extensibility.IExtendable, NServiceBus.ICancellableContext, NServiceBus.IMessageProcessingContext, NServiceBus.IPipelineContext, NServiceBus.Pipeline.IBehaviorContext, NServiceBus.Pipeline.IIncomingContext
    {
        protected TestableIncomingContext(NServiceBus.IMessageCreator messageCreator = null) { }
        public Microsoft.Extensions.DependencyInjection.IServiceCollection ServiceCollection { get; set; }
        protected virtual System.IServiceProvider GetBuilder() { }
    }
    public class TestableIncomingLogicalMessageContext : NServiceBus.Testing.TestableIncomingContext, NServiceBus.Extensibility.IExtendable, NServiceBus.ICancellableContext, NServiceBus.IMessageProcessingContext, NServiceBus.IPipelineContext, NServiceBus.Pipeline.IBehaviorContext, NServiceBus.Pipeline.IIncomingContext, NServiceBus.Pipeline.IIncomingLogicalMessageContext
    {
        public TestableIncomingLogicalMessageContext(NServiceBus.IMessageCreator messageCreator = null) { }
        public System.Collections.Generic.Dictionary<string, string> Headers { get; set; }
        public NServiceBus.Pipeline.LogicalMessage Message { get; set; }
        public bool MessageHandled { get; set; }
        public virtual void UpdateMessageInstance(object newInstance) { }
    }
    public class TestableIncomingPhysicalMessageContext : NServiceBus.Testing.TestableIncomingContext, NServiceBus.Extensibility.IExtendable, NServiceBus.ICancellableContext, NServiceBus.IMessageProcessingContext, NServiceBus.IPipelineContext, NServiceBus.Pipeline.IBehaviorContext, NServiceBus.Pipeline.IIncomingContext, NServiceBus.Pipeline.IIncomingPhysicalMessageContext
    {
        public TestableIncomingPhysicalMessageContext() { }
        public NServiceBus.Transport.IncomingMessage Message { get; set; }
        public virtual void UpdateMessage(System.ReadOnlyMemory<byte> body) { }
    }
    public class TestableInvokeHandlerContext : NServiceBus.Testing.TestableIncomingContext, NServiceBus.Extensibility.IExtendable, NServiceBus.ICancellableContext, NServiceBus.IMessageHandlerContext, NServiceBus.IMessageProcessingContext, NServiceBus.IPipelineContext, NServiceBus.Pipeline.IBehaviorContext, NServiceBus.Pipeline.IIncomingContext, NServiceBus.Pipeline.IInvokeHandlerContext
    {
        public TestableInvokeHandlerContext(NServiceBus.IMessageCreator messageCreator = null) { }
        public bool DoNotContinueDispatchingCurrentMessageToHandlersWasCalled { get; set; }
        public bool HandlerInvocationAborted { get; }
        public System.Collections.Generic.Dictionary<string, string> Headers { get; set; }
        public object MessageBeingHandled { get; set; }
        public NServiceBus.Pipeline.MessageHandler MessageHandler { get; set; }
        public NServiceBus.Unicast.Messages.MessageMetadata MessageMetadata { get; set; }
        public NServiceBus.Persistence.ISynchronizedStorageSession SynchronizedStorageSession { get; set; }
        public void DoNotContinueDispatchingCurrentMessageToHandlers() { }
    }
    public class TestableMessageHandlerContext : NServiceBus.Testing.TestableInvokeHandlerContext
    {
        public TestableMessageHandlerContext(NServiceBus.IMessageCreator messageCreator = null) { }
    }
    public class TestableMessageProcessingContext : NServiceBus.Testing.TestablePipelineContext, NServiceBus.Extensibility.IExtendable, NServiceBus.ICancellableContext, NServiceBus.IMessageProcessingContext, NServiceBus.IPipelineContext
    {
        public TestableMessageProcessingContext(NServiceBus.IMessageCreator messageCreator = null) { }
        public virtual string[] ForwardedMessages { get; }
        public System.Collections.Generic.IDictionary<string, string> MessageHeaders { get; set; }
        public string MessageId { get; set; }
        public virtual NServiceBus.Testing.RepliedMessage<object>[] RepliedMessages { get; }
        public string ReplyToAddress { get; set; }
        public virtual System.Threading.Tasks.Task ForwardCurrentMessageTo(string destination) { }
        public virtual System.Threading.Tasks.Task Reply(object message, NServiceBus.ReplyOptions options) { }
        public virtual System.Threading.Tasks.Task Reply<T>(System.Action<T> messageConstructor, NServiceBus.ReplyOptions options) { }
    }
    public class TestableMessageSession : NServiceBus.IMessageSession
    {
        protected NServiceBus.IMessageCreator messageCreator;
        public TestableMessageSession(NServiceBus.IMessageCreator messageCreator = null) { }
        [System.Obsolete("The member currently throws a NotImplementedException. Will be removed in version" +
            " 9.0.0.", true)]
        public NServiceBus.Extensibility.ContextBag Extensions { get; set; }
        public virtual NServiceBus.Testing.PublishedMessage<object>[] PublishedMessages { get; }
        public virtual NServiceBus.Testing.SentMessage<object>[] SentMessages { get; }
        public virtual NServiceBus.Testing.Subscription[] Subscriptions { get; }
        public NServiceBus.Testing.TimeoutMessage<object>[] TimeoutMessages { get; }
        public virtual NServiceBus.Testing.Unsubscription[] Unsubscription { get; }
        public virtual System.Threading.Tasks.Task Publish(object message, NServiceBus.PublishOptions publishOptions, System.Threading.CancellationToken cancellationToken = default) { }
        public virtual System.Threading.Tasks.Task Publish<T>(System.Action<T> messageConstructor, NServiceBus.PublishOptions publishOptions, System.Threading.CancellationToken cancellationToken = default) { }
        public virtual System.Threading.Tasks.Task Send(object message, NServiceBus.SendOptions sendOptions, System.Threading.CancellationToken cancellationToken = default) { }
        public virtual System.Threading.Tasks.Task Send<T>(System.Action<T> messageConstructor, NServiceBus.SendOptions sendOptions, System.Threading.CancellationToken cancellationToken = default) { }
        public virtual System.Threading.Tasks.Task Subscribe(System.Type eventType, NServiceBus.SubscribeOptions options, System.Threading.CancellationToken cancellationToken = default) { }
        public virtual System.Threading.Tasks.Task Unsubscribe(System.Type eventType, NServiceBus.UnsubscribeOptions options, System.Threading.CancellationToken cancellationToken = default) { }
    }
    public class TestableOutgoingContext : NServiceBus.Testing.TestablePipelineContext, NServiceBus.Extensibility.IExtendable, NServiceBus.ICancellableContext, NServiceBus.IPipelineContext, NServiceBus.Pipeline.IBehaviorContext, NServiceBus.Pipeline.IOutgoingContext
    {
        public TestableOutgoingContext() { }
        public System.Collections.Generic.Dictionary<string, string> Headers { get; set; }
        public string MessageId { get; set; }
        public Microsoft.Extensions.DependencyInjection.IServiceCollection ServiceCollection { get; set; }
        protected virtual System.IServiceProvider GetBuilder() { }
    }
    public class TestableOutgoingLogicalMessageContext : NServiceBus.Testing.TestableOutgoingContext, NServiceBus.Extensibility.IExtendable, NServiceBus.ICancellableContext, NServiceBus.IPipelineContext, NServiceBus.Pipeline.IBehaviorContext, NServiceBus.Pipeline.IOutgoingContext, NServiceBus.Pipeline.IOutgoingLogicalMessageContext
    {
        public TestableOutgoingLogicalMessageContext() { }
        public NServiceBus.Pipeline.OutgoingLogicalMessage Message { get; set; }
        public System.Collections.Generic.IReadOnlyCollection<NServiceBus.Routing.RoutingStrategy> RoutingStrategies { get; set; }
        public virtual void UpdateMessage(object newInstance) { }
    }
    public class TestableOutgoingPhysicalMessageContext : NServiceBus.Testing.TestableOutgoingContext, NServiceBus.Extensibility.IExtendable, NServiceBus.ICancellableContext, NServiceBus.IPipelineContext, NServiceBus.Pipeline.IBehaviorContext, NServiceBus.Pipeline.IOutgoingContext, NServiceBus.Pipeline.IOutgoingPhysicalMessageContext
    {
        public TestableOutgoingPhysicalMessageContext() { }
        public System.ReadOnlyMemory<byte> Body { get; set; }
        public System.Collections.Generic.IReadOnlyCollection<NServiceBus.Routing.RoutingStrategy> RoutingStrategies { get; set; }
        public virtual void UpdateMessage(System.ReadOnlyMemory<byte> body) { }
    }
    public class TestableOutgoingPublishContext : NServiceBus.Testing.TestableOutgoingContext, NServiceBus.Extensibility.IExtendable, NServiceBus.ICancellableContext, NServiceBus.IPipelineContext, NServiceBus.Pipeline.IBehaviorContext, NServiceBus.Pipeline.IOutgoingContext, NServiceBus.Pipeline.IOutgoingPublishContext
    {
        public TestableOutgoingPublishContext() { }
        public NServiceBus.Pipeline.OutgoingLogicalMessage Message { get; set; }
    }
    public class TestableOutgoingReplyContext : NServiceBus.Testing.TestableOutgoingContext, NServiceBus.Extensibility.IExtendable, NServiceBus.ICancellableContext, NServiceBus.IPipelineContext, NServiceBus.Pipeline.IBehaviorContext, NServiceBus.Pipeline.IOutgoingContext, NServiceBus.Pipeline.IOutgoingReplyContext
    {
        public TestableOutgoingReplyContext() { }
        public NServiceBus.Pipeline.OutgoingLogicalMessage Message { get; set; }
    }
    public class TestableOutgoingSendContext : NServiceBus.Testing.TestableOutgoingContext, NServiceBus.Extensibility.IExtendable, NServiceBus.ICancellableContext, NServiceBus.IPipelineContext, NServiceBus.Pipeline.IBehaviorContext, NServiceBus.Pipeline.IOutgoingContext, NServiceBus.Pipeline.IOutgoingSendContext
    {
        public TestableOutgoingSendContext() { }
        public NServiceBus.Pipeline.OutgoingLogicalMessage Message { get; set; }
    }
    public class TestablePipelineContext : NServiceBus.Extensibility.IExtendable, NServiceBus.ICancellableContext, NServiceBus.IPipelineContext
    {
        protected NServiceBus.IMessageCreator messageCreator;
        public TestablePipelineContext(NServiceBus.IMessageCreator messageCreator = null) { }
        public System.Threading.CancellationToken CancellationToken { get; set; }
        public NServiceBus.Extensibility.ContextBag Extensions { get; set; }
        public virtual NServiceBus.Testing.PublishedMessage<object>[] PublishedMessages { get; }
        public virtual NServiceBus.Testing.SentMessage<object>[] SentMessages { get; }
        public NServiceBus.Testing.TimeoutMessage<object>[] TimeoutMessages { get; }
        public virtual System.Threading.Tasks.Task Publish(object message, NServiceBus.PublishOptions options) { }
        public virtual System.Threading.Tasks.Task Publish<T>(System.Action<T> messageConstructor, NServiceBus.PublishOptions publishOptions) { }
        public virtual System.Threading.Tasks.Task Send(object message, NServiceBus.SendOptions options) { }
        public virtual System.Threading.Tasks.Task Send<T>(System.Action<T> messageConstructor, NServiceBus.SendOptions options) { }
    }
    public class TestableRecoverabilityContext : NServiceBus.Testing.TestableBehaviorContext, NServiceBus.Extensibility.IExtendable, NServiceBus.ICancellableContext, NServiceBus.Pipeline.IBehaviorContext, NServiceBus.Pipeline.IRecoverabilityActionContext, NServiceBus.Pipeline.IRecoverabilityContext
    {
        public TestableRecoverabilityContext() { }
        public int DelayedDeliveriesPerformed { get; set; }
        public System.Exception Exception { get; set; }
        public NServiceBus.Transport.IncomingMessage FailedMessage { get; set; }
        public int ImmediateProcessingFailures { get; set; }
        public bool IsLocked { get; }
        public System.Collections.Generic.Dictionary<string, string> Metadata { get; set; }
        public string ReceiveAddress { get; set; }
        public NServiceBus.RecoverabilityAction RecoverabilityAction { get; set; }
        public NServiceBus.RecoverabilityConfig RecoverabilityConfiguration { get; set; }
        public NServiceBus.Pipeline.IRecoverabilityActionContext PreventChanges() { }
    }
    public class TestableRoutingContext : NServiceBus.Testing.TestableBehaviorContext, NServiceBus.Extensibility.IExtendable, NServiceBus.ICancellableContext, NServiceBus.Pipeline.IBehaviorContext, NServiceBus.Pipeline.IRoutingContext
    {
        public TestableRoutingContext() { }
        public NServiceBus.Transport.OutgoingMessage Message { get; set; }
        public System.Collections.Generic.IReadOnlyCollection<NServiceBus.Routing.RoutingStrategy> RoutingStrategies { get; set; }
    }
    [System.Diagnostics.DebuggerDisplay("TestableSaga for {typeof(TSaga).FullName}")]
    public class TestableSaga<TSaga, TSagaEntity>
        where TSaga : NServiceBus.Saga<TSagaEntity>
        where TSagaEntity :  class, NServiceBus.IContainSagaData, new ()
    {
        public TestableSaga(System.Func<TSaga> sagaFactory = null, System.DateTime? initialDateTime = default) { }
        public System.DateTime CurrentTime { get; }
        public bool HasQueuedMessages { get; }
        public int QueueLength { get; }
        public System.Threading.Tasks.Task<NServiceBus.Testing.TestableSaga<TSaga, TSagaEntity>.MessageProcessingResult[]> AdvanceTime(System.TimeSpan timeToAdvance, System.Threading.CancellationToken cancellationToken = default) { }
        public System.Threading.Tasks.Task<NServiceBus.Testing.TestableSaga<TSaga, TSagaEntity>.MessageProcessingResult> Process<TMessageType>(TMessageType message, NServiceBus.Testing.TestableMessageHandlerContext context = null, System.Collections.Generic.IReadOnlyDictionary<string, string> messageHeaders = null) { }
        public System.Threading.Tasks.Task<NServiceBus.Testing.TestableSaga<TSaga, TSagaEntity>.MessageProcessingResult> ProcessAutoCorrelatedReply<TMessageType>(System.Guid sagaId, TMessageType message, NServiceBus.Testing.TestableMessageHandlerContext context = null, System.Collections.Generic.IReadOnlyDictionary<string, string> messageHeaders = null) { }
        public System.Threading.Tasks.Task<NServiceBus.Testing.TestableSaga<TSaga, TSagaEntity>.MessageProcessingResult> ProcessQueuedMessage(NServiceBus.Testing.TestableMessageHandlerContext context = null) { }
        public NServiceBus.Testing.QueuedSagaMessage QueuePeek() { }
        public void SimulateHandlerResponse<TMessageFromSaga, TResponseMessage>(System.Func<TMessageFromSaga, TResponseMessage> responseGenerator) { }
        [System.Diagnostics.DebuggerDisplay("MessageProcessingResult: {HandledMessage.Message}")]
        public class MessageProcessingResult
        {
            public bool Completed { get; }
            public NServiceBus.Testing.TestableMessageHandlerContext Context { get; }
            public NServiceBus.Testing.QueuedSagaMessage HandledMessage { get; }
            public TSagaEntity SagaDataSnapshot { get; }
            public System.Guid SagaId { get; }
            public TMessageType FindPublishedMessage<TMessageType>() { }
            public TMessageType FindReplyMessage<TMessageType>() { }
            public TMessageType FindSentMessage<TMessageType>() { }
            public TMessageType FindTimeoutMessage<TMessageType>() { }
        }
    }
    public class TestableSubscribeContext : NServiceBus.Testing.TestableBehaviorContext, NServiceBus.Extensibility.IExtendable, NServiceBus.ICancellableContext, NServiceBus.Pipeline.IBehaviorContext, NServiceBus.Pipeline.ISubscribeContext
    {
        public TestableSubscribeContext() { }
        public System.Type EventType { get; set; }
        public System.Type[] EventTypes { get; set; }
    }
    public class TestableTransportReceiveContext : NServiceBus.Testing.TestableBehaviorContext, NServiceBus.Extensibility.IExtendable, NServiceBus.ICancellableContext, NServiceBus.Pipeline.IBehaviorContext, NServiceBus.Pipeline.ITransportReceiveContext
    {
        public TestableTransportReceiveContext() { }
        public NServiceBus.Transport.IncomingMessage Message { get; set; }
        public bool ReceiveOperationAborted { get; set; }
        public virtual void AbortReceiveOperation() { }
    }
    public class TestableUnsubscribeContext : NServiceBus.Testing.TestableBehaviorContext, NServiceBus.Extensibility.IExtendable, NServiceBus.ICancellableContext, NServiceBus.Pipeline.IBehaviorContext, NServiceBus.Pipeline.IUnsubscribeContext
    {
        public TestableUnsubscribeContext() { }
        public System.Type EventType { get; set; }
    }
    public static class TestingExtensions
    {
        public static TMessageType FindPublishedMessage<TMessageType>(this NServiceBus.Testing.TestablePipelineContext context) { }
        public static TMessageType FindReplyMessage<TMessageType>(this NServiceBus.Testing.TestableMessageProcessingContext context) { }
        public static TMessageType FindSentMessage<TMessageType>(this NServiceBus.Testing.TestablePipelineContext context) { }
        public static TMessageType FindTimeoutMessage<TMessageType>(this NServiceBus.Testing.TestablePipelineContext context) { }
    }
    public class TestingLoggerFactory : NServiceBus.Logging.LoggingFactoryDefinition
    {
        public TestingLoggerFactory() { }
        public System.IDisposable BeginScope(System.IO.TextWriter writer, NServiceBus.Logging.LogLevel level = 0) { }
        protected override NServiceBus.Logging.ILoggerFactory GetLoggingFactory() { }
        public void Level(NServiceBus.Logging.LogLevel level) { }
        public void WriteTo(System.IO.TextWriter writer) { }
    }
    public class TimeoutMessage<TMessage> : NServiceBus.Testing.OutgoingMessage<TMessage, NServiceBus.SendOptions>
    {
        public TimeoutMessage(TMessage message, NServiceBus.SendOptions options, System.DateTimeOffset at) { }
        public TimeoutMessage(TMessage message, NServiceBus.SendOptions options, System.TimeSpan within) { }
        public System.DateTimeOffset? At { get; }
        public System.TimeSpan? Within { get; }
    }
    public class Unsubscription : NServiceBus.Testing.OutgoingMessage<System.Type, NServiceBus.UnsubscribeOptions>
    {
        public Unsubscription(System.Type message, NServiceBus.UnsubscribeOptions options) { }
    }
}