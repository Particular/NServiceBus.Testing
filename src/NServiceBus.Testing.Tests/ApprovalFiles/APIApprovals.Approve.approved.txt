[assembly: System.CLSCompliant(false)]
[assembly: System.Runtime.InteropServices.ComVisible(false)]
namespace NServiceBus.Testing
{
    public class ExpectationException : System.Exception
    {
        public ExpectationException() { }
        public ExpectationException(string message) { }
    }
    public class Handler<T>
    {
        public NServiceBus.Testing.Handler<T> ConfigureHandlerContext(System.Action<NServiceBus.Testing.TestableMessageHandlerContext> contextInitializer) { }
        public NServiceBus.Testing.Handler<T> ExpectDefer<TMessage>(System.Func<TMessage, System.DateTimeOffset, bool> check) { }
        public NServiceBus.Testing.Handler<T> ExpectDefer<TMessage>(System.Func<TMessage, System.TimeSpan, bool> check) { }
        public NServiceBus.Testing.Handler<T> ExpectDoNotContinueDispatchingCurrentMessageToHandlers() { }
        public NServiceBus.Testing.Handler<T> ExpectForwardCurrentMessageTo(System.Func<string, bool> check = null) { }
        public NServiceBus.Testing.Handler<T> ExpectNotDefer<TMessage>(System.Func<TMessage, System.DateTimeOffset, bool> check) { }
        public NServiceBus.Testing.Handler<T> ExpectNotDefer<TMessage>(System.Func<TMessage, System.TimeSpan, bool> check) { }
        public NServiceBus.Testing.Handler<T> ExpectNotForwardCurrentMessageTo(System.Func<string, bool> check = null) { }
        public NServiceBus.Testing.Handler<T> ExpectNotPublish<TMessage>(System.Func<TMessage, bool> check) { }
        public NServiceBus.Testing.Handler<T> ExpectNotPublish<TMessage>(System.Func<TMessage, NServiceBus.PublishOptions, bool> check = null) { }
        public NServiceBus.Testing.Handler<T> ExpectNotReply<TMessage>(System.Func<TMessage, bool> check) { }
        public NServiceBus.Testing.Handler<T> ExpectNotReply<TMessage>(System.Func<TMessage, NServiceBus.ReplyOptions, bool> check = null) { }
        public NServiceBus.Testing.Handler<T> ExpectNotSend<TMessage>(System.Func<TMessage, bool> check) { }
        public NServiceBus.Testing.Handler<T> ExpectNotSend<TMessage>(System.Func<TMessage, NServiceBus.SendOptions, bool> check = null) { }
        public NServiceBus.Testing.Handler<T> ExpectNotSendLocal<TMessage>(System.Func<TMessage, bool> check = null) { }
        public NServiceBus.Testing.Handler<T> ExpectNotSendToDestination<TMessage>(System.Func<TMessage, string, bool> check = null) { }
        public NServiceBus.Testing.Handler<T> ExpectPublish<TMessage>(System.Func<TMessage, bool> check) { }
        public NServiceBus.Testing.Handler<T> ExpectPublish<TMessage>(System.Func<TMessage, NServiceBus.PublishOptions, bool> check = null) { }
        public NServiceBus.Testing.Handler<T> ExpectReply<TMessage>(System.Func<TMessage, bool> check) { }
        public NServiceBus.Testing.Handler<T> ExpectReply<TMessage>(System.Func<TMessage, NServiceBus.ReplyOptions, bool> check = null) { }
        public NServiceBus.Testing.Handler<T> ExpectSend<TMessage>(System.Func<TMessage, bool> check) { }
        public NServiceBus.Testing.Handler<T> ExpectSend<TMessage>(System.Func<TMessage, NServiceBus.SendOptions, bool> check = null) { }
        public NServiceBus.Testing.Handler<T> ExpectSendLocal<TMessage>(System.Func<TMessage, bool> check = null) { }
        public NServiceBus.Testing.Handler<T> ExpectSendToDestination<TMessage>(System.Func<TMessage, string, bool> check) { }
        public void OnMessage<TMessage>(System.Action<TMessage> initializeMessage = null) { }
        public void OnMessage<TMessage>(TMessage initializedMessage) { }
        public void OnMessage<TMessage>(string messageId, System.Action<TMessage> initializeMessage = null) { }
        public void OnMessage<TMessage>(TMessage message, string messageId) { }
        public System.Threading.Tasks.Task OnMessageAsync<TMessage>(System.Action<TMessage> initializeMessage = null) { }
        public System.Threading.Tasks.Task OnMessageAsync<TMessage>(TMessage initializedMessage) { }
        public System.Threading.Tasks.Task OnMessageAsync<TMessage>(string messageId, System.Action<TMessage> initializeMessage = null) { }
        public System.Threading.Tasks.Task OnMessageAsync<TMessage>(TMessage message, string messageId) { }
        public NServiceBus.Testing.Handler<T> SetIncomingHeader(string key, string value) { }
        public NServiceBus.Testing.Handler<T> WithExternalDependencies(System.Action<T> actionToSetUpExternalDependencies) { }
    }
    public static class OutgoingMessageExtensions
    {
        public static System.Collections.Generic.IEnumerable<NServiceBus.Testing.PublishedMessage<TMessage>> Containing<TMessage>(this System.Collections.Generic.IEnumerable<NServiceBus.Testing.PublishedMessage<object>> publishedMessages) { }
        public static System.Collections.Generic.IEnumerable<NServiceBus.Testing.RepliedMessage<TMessage>> Containing<TMessage>(this System.Collections.Generic.IEnumerable<NServiceBus.Testing.RepliedMessage<object>> repliedMessages) { }
        public static System.Collections.Generic.IEnumerable<NServiceBus.Testing.SentMessage<TMessage>> Containing<TMessage>(this System.Collections.Generic.IEnumerable<NServiceBus.Testing.SentMessage<object>> sentMessages) { }
        public static TMessage Message<TMessage>(this NServiceBus.Testing.PublishedMessage<object> sentMessage)
            where TMessage :  class { }
        public static TMessage Message<TMessage>(this NServiceBus.Testing.RepliedMessage<object> sentMessage)
            where TMessage :  class { }
        public static TMessage Message<TMessage>(this NServiceBus.Testing.SentMessage<object> sentMessage)
            where TMessage :  class { }
    }
    public class OutgoingMessage<TMessage, TOptions>
        where TOptions : NServiceBus.Extensibility.ExtendableOptions
    {
        protected OutgoingMessage(TMessage message, TOptions options) { }
        public TMessage Message { get; }
        public TOptions Options { get; }
    }
    public class PublishedMessage<TMessage> : NServiceBus.Testing.OutgoingMessage<TMessage, NServiceBus.PublishOptions>
    {
        public PublishedMessage(TMessage message, NServiceBus.PublishOptions options) { }
    }
    public class RepliedMessage<TMessage> : NServiceBus.Testing.OutgoingMessage<TMessage, NServiceBus.ReplyOptions>
    {
        public RepliedMessage(TMessage message, NServiceBus.ReplyOptions options) { }
    }
    public class Saga<T>
        where T : NServiceBus.Saga
    {
        public NServiceBus.Testing.Saga<T> ConfigureHandlerContext(System.Action<NServiceBus.Testing.TestableMessageHandlerContext> contextInitializer) { }
        public NServiceBus.Testing.Saga<T> ExpectForwardCurrentMessageTo(System.Func<string, bool> check = null) { }
        public NServiceBus.Testing.Saga<T> ExpectNoTimeoutToBeSetAt<TMessage>(System.Func<TMessage, System.DateTimeOffset, bool> check = null) { }
        public NServiceBus.Testing.Saga<T> ExpectNoTimeoutToBeSetIn<TMessage>(System.Func<TMessage, System.TimeSpan, bool> check = null) { }
        public NServiceBus.Testing.Saga<T> ExpectNotForwardCurrentMessageTo(System.Func<string, bool> check = null) { }
        public NServiceBus.Testing.Saga<T> ExpectNotPublish<TMessage>(System.Action<TMessage> check) { }
        public NServiceBus.Testing.Saga<T> ExpectNotPublish<TMessage>(System.Func<TMessage, bool> check) { }
        public NServiceBus.Testing.Saga<T> ExpectNotPublish<TMessage>(System.Func<TMessage, NServiceBus.PublishOptions, bool> check = null) { }
        public NServiceBus.Testing.Saga<T> ExpectNotReply<TMessage>(System.Func<TMessage, bool> check) { }
        public NServiceBus.Testing.Saga<T> ExpectNotReply<TMessage>(System.Func<TMessage, NServiceBus.ReplyOptions, bool> check = null) { }
        public NServiceBus.Testing.Saga<T> ExpectNotSend<TMessage>(System.Action<TMessage> check) { }
        public NServiceBus.Testing.Saga<T> ExpectNotSend<TMessage>(System.Func<TMessage, bool> check) { }
        public NServiceBus.Testing.Saga<T> ExpectNotSend<TMessage>(System.Func<TMessage, NServiceBus.SendOptions, bool> check = null) { }
        public NServiceBus.Testing.Saga<T> ExpectNotSendLocal<TMessage>(System.Action<TMessage> check) { }
        public NServiceBus.Testing.Saga<T> ExpectNotSendLocal<TMessage>(System.Func<TMessage, bool> check = null) { }
        public NServiceBus.Testing.Saga<T> ExpectNotSendToDestination<TMessage>(System.Action<TMessage, string> check) { }
        public NServiceBus.Testing.Saga<T> ExpectNotSendToDestination<TMessage>(System.Func<TMessage, string, bool> check = null) { }
        public NServiceBus.Testing.Saga<T> ExpectPublish<TMessage>(System.Action<TMessage> check) { }
        public NServiceBus.Testing.Saga<T> ExpectPublish<TMessage>(System.Func<TMessage, bool> check) { }
        public NServiceBus.Testing.Saga<T> ExpectPublish<TMessage>(System.Func<TMessage, NServiceBus.PublishOptions, bool> check = null) { }
        public NServiceBus.Testing.Saga<T> ExpectReply<TMessage>(System.Func<TMessage, bool> check) { }
        public NServiceBus.Testing.Saga<T> ExpectReply<TMessage>(System.Func<TMessage, NServiceBus.ReplyOptions, bool> check = null) { }
        public NServiceBus.Testing.Saga<T> ExpectReplyToOriginator<TMessage>(System.Action<TMessage> check) { }
        public NServiceBus.Testing.Saga<T> ExpectReplyToOriginator<TMessage>(System.Func<TMessage, bool> check = null) { }
        public NServiceBus.Testing.Saga<T> ExpectSagaCompleted() { }
        public NServiceBus.Testing.Saga<T> ExpectSagaData<TSagaData>(System.Func<TSagaData, bool> check)
            where TSagaData : NServiceBus.IContainSagaData { }
        public NServiceBus.Testing.Saga<T> ExpectSagaNotCompleted() { }
        public NServiceBus.Testing.Saga<T> ExpectSend<TMessage>(System.Action<TMessage> check) { }
        public NServiceBus.Testing.Saga<T> ExpectSend<TMessage>(System.Func<TMessage, bool> check) { }
        public NServiceBus.Testing.Saga<T> ExpectSend<TMessage>(System.Func<TMessage, NServiceBus.SendOptions, bool> check = null) { }
        public NServiceBus.Testing.Saga<T> ExpectSendLocal<TMessage>(System.Action<TMessage> check) { }
        public NServiceBus.Testing.Saga<T> ExpectSendLocal<TMessage>(System.Func<TMessage, bool> check = null) { }
        public NServiceBus.Testing.Saga<T> ExpectSendToDestination<TMessage>(System.Action<TMessage, string> check) { }
        public NServiceBus.Testing.Saga<T> ExpectSendToDestination<TMessage>(System.Func<TMessage, string, bool> check = null) { }
        public NServiceBus.Testing.Saga<T> ExpectTimeoutToBeSetAt<TMessage>(System.Action<TMessage, System.DateTimeOffset> check) { }
        public NServiceBus.Testing.Saga<T> ExpectTimeoutToBeSetAt<TMessage>(System.Func<TMessage, System.DateTimeOffset, bool> check = null) { }
        public NServiceBus.Testing.Saga<T> ExpectTimeoutToBeSetIn<TMessage>(System.Action<TMessage, System.TimeSpan> check) { }
        public NServiceBus.Testing.Saga<T> ExpectTimeoutToBeSetIn<TMessage>(System.Func<TMessage, System.TimeSpan, bool> check = null) { }
        public NServiceBus.Testing.Saga<T> SetIncomingHeader(string key, string value) { }
        public NServiceBus.Testing.Saga<T> When(System.Func<T, NServiceBus.IMessageHandlerContext, System.Threading.Tasks.Task> sagaIsInvoked) { }
        public NServiceBus.Testing.Saga<T> When<TMessage>(System.Func<T, System.Func<TMessage, NServiceBus.IMessageHandlerContext, System.Threading.Tasks.Task>> handlerSelector, System.Action<TMessage> messageInitializer = null) { }
        public NServiceBus.Testing.Saga<T> When<TMessage>(System.Func<T, System.Func<TMessage, NServiceBus.IMessageHandlerContext, System.Threading.Tasks.Task>> handlerSelector, TMessage message) { }
        public System.Threading.Tasks.Task<NServiceBus.Testing.Saga<T>> WhenAsync(System.Func<T, NServiceBus.IMessageHandlerContext, System.Threading.Tasks.Task> sagaIsInvoked) { }
        public System.Threading.Tasks.Task<NServiceBus.Testing.Saga<T>> WhenAsync<TMessage>(System.Func<T, System.Func<TMessage, NServiceBus.IMessageHandlerContext, System.Threading.Tasks.Task>> handlerSelector, System.Action<TMessage> messageInitializer = null) { }
        public System.Threading.Tasks.Task<NServiceBus.Testing.Saga<T>> WhenAsync<TMessage>(System.Func<T, System.Func<TMessage, NServiceBus.IMessageHandlerContext, System.Threading.Tasks.Task>> handlerSelector, TMessage message) { }
        public NServiceBus.Testing.Saga<T> WhenHandling<TMessage>(System.Action<TMessage> initializeMessage = null) { }
        public NServiceBus.Testing.Saga<T> WhenHandling<TMessage>(TMessage message) { }
        public System.Threading.Tasks.Task<NServiceBus.Testing.Saga<T>> WhenHandlingAsync<TMessage>(System.Action<TMessage> initializeMessage = null) { }
        public System.Threading.Tasks.Task<NServiceBus.Testing.Saga<T>> WhenHandlingAsync<TMessage>(TMessage message) { }
        public NServiceBus.Testing.Saga<T> WhenHandlingTimeout<TMessage>(System.Action<TMessage> initializeMessage = null) { }
        public NServiceBus.Testing.Saga<T> WhenHandlingTimeout<TMessage>(TMessage message) { }
        public System.Threading.Tasks.Task<NServiceBus.Testing.Saga<T>> WhenHandlingTimeoutAsync<TMessage>(System.Action<TMessage> initializeMessage = null) { }
        public System.Threading.Tasks.Task<NServiceBus.Testing.Saga<T>> WhenHandlingTimeoutAsync<TMessage>(TMessage message) { }
        public NServiceBus.Testing.Saga<T> WhenReceivesMessageFrom(string client) { }
        public NServiceBus.Testing.Saga<T> WhenSagaTimesOut() { }
        public NServiceBus.Testing.Saga<T> WhenSagaTimesOut(System.DateTimeOffset at) { }
        public NServiceBus.Testing.Saga<T> WhenSagaTimesOut(System.TimeSpan after) { }
        public System.Threading.Tasks.Task<NServiceBus.Testing.Saga<T>> WhenSagaTimesOutAsync() { }
        public System.Threading.Tasks.Task<NServiceBus.Testing.Saga<T>> WhenSagaTimesOutAsync(System.DateTimeOffset at) { }
        public System.Threading.Tasks.Task<NServiceBus.Testing.Saga<T>> WhenSagaTimesOutAsync(System.TimeSpan after) { }
        public NServiceBus.Testing.Saga<T> WithExternalDependencies(System.Action<T> actionToSetUpExternalDependencies) { }
    }
    public class SentMessage<TMessage> : NServiceBus.Testing.OutgoingMessage<TMessage, NServiceBus.SendOptions>
    {
        public SentMessage(TMessage message, NServiceBus.SendOptions options) { }
    }
    public class Subscription : NServiceBus.Testing.OutgoingMessage<System.Type, NServiceBus.SubscribeOptions>
    {
        public Subscription(System.Type message, NServiceBus.SubscribeOptions options) { }
    }
    public class Test
    {
        public Test() { }
        public static TMessage CreateInstance<TMessage>() { }
        public static TMessage CreateInstance<TMessage>(System.Action<TMessage> action) { }
        public static NServiceBus.Testing.Handler<THandler> Handler<THandler>()
            where THandler : new() { }
        public static NServiceBus.Testing.Handler<THandler> Handler<THandler>(THandler handler) { }
        public static NServiceBus.Testing.Saga<TSaga> Saga<TSaga>()
            where TSaga : NServiceBus.Saga, new () { }
        public static NServiceBus.Testing.Saga<TSaga> Saga<TSaga>(NServiceBus.IContainSagaData sagaData)
            where TSaga : NServiceBus.Saga, new () { }
        public static NServiceBus.Testing.Saga<TSaga> Saga<TSaga>(System.Guid sagaId)
            where TSaga : NServiceBus.Saga, new () { }
        public static NServiceBus.Testing.Saga<TSaga> Saga<TSaga>(TSaga saga)
            where TSaga : NServiceBus.Saga { }
    }
    public class TestableAuditContext : NServiceBus.Testing.TestableBehaviorContext, NServiceBus.Extensibility.IExtendable, NServiceBus.ICancellableContext, NServiceBus.Pipeline.IAuditContext, NServiceBus.Pipeline.IBehaviorContext
    {
        public TestableAuditContext() { }
        public System.Collections.Generic.IDictionary<string, string> AddedAuditData { get; }
        public string AuditAddress { get; set; }
        public NServiceBus.Transport.OutgoingMessage Message { get; set; }
        public void AddAuditData(string key, string value) { }
    }
    public class TestableBatchDispatchContext : NServiceBus.Testing.TestableBehaviorContext, NServiceBus.Extensibility.IExtendable, NServiceBus.ICancellableContext, NServiceBus.Pipeline.IBatchDispatchContext, NServiceBus.Pipeline.IBehaviorContext
    {
        public TestableBatchDispatchContext() { }
        public System.Collections.Generic.IList<NServiceBus.Transport.TransportOperation> Operations { get; set; }
    }
    public abstract class TestableBehaviorContext : NServiceBus.Extensibility.IExtendable, NServiceBus.ICancellableContext, NServiceBus.Pipeline.IBehaviorContext
    {
        protected TestableBehaviorContext() { }
        public System.Threading.CancellationToken CancellationToken { get; set; }
        public NServiceBus.Extensibility.ContextBag Extensions { get; set; }
        public Microsoft.Extensions.DependencyInjection.IServiceCollection ServiceCollection { get; set; }
        protected virtual System.IServiceProvider GetBuilder() { }
    }
    public class TestableDispatchContext : NServiceBus.Testing.TestableBehaviorContext, NServiceBus.Extensibility.IExtendable, NServiceBus.ICancellableContext, NServiceBus.Pipeline.IBehaviorContext, NServiceBus.Pipeline.IDispatchContext
    {
        public TestableDispatchContext() { }
        public System.Collections.Generic.IList<NServiceBus.Transport.TransportOperation> Operations { get; set; }
    }
    public class TestableEndpointInstance : NServiceBus.Testing.TestableMessageSession, NServiceBus.IEndpointInstance, NServiceBus.IMessageSession
    {
        public TestableEndpointInstance() { }
        public bool EndpointStopped { get; }
        public virtual System.Threading.Tasks.Task Stop(System.Threading.CancellationToken cancellationToken = default) { }
    }
    [System.Obsolete("Forwarding functionality has been removed from NServiceBus. Will be removed in ve" +
        "rsion 9.0.0.", true)]
    public class TestableForwardingContext
    {
        public TestableForwardingContext() { }
    }
    public abstract class TestableIncomingContext : NServiceBus.Testing.TestableMessageProcessingContext, NServiceBus.Extensibility.IExtendable, NServiceBus.ICancellableContext, NServiceBus.IMessageProcessingContext, NServiceBus.IPipelineContext, NServiceBus.Pipeline.IBehaviorContext, NServiceBus.Pipeline.IIncomingContext
    {
        protected TestableIncomingContext(NServiceBus.IMessageCreator messageCreator = null) { }
        public Microsoft.Extensions.DependencyInjection.IServiceCollection ServiceCollection { get; set; }
        protected virtual System.IServiceProvider GetBuilder() { }
    }
    public class TestableIncomingLogicalMessageContext : NServiceBus.Testing.TestableIncomingContext, NServiceBus.Extensibility.IExtendable, NServiceBus.ICancellableContext, NServiceBus.IMessageProcessingContext, NServiceBus.IPipelineContext, NServiceBus.Pipeline.IBehaviorContext, NServiceBus.Pipeline.IIncomingContext, NServiceBus.Pipeline.IIncomingLogicalMessageContext
    {
        public TestableIncomingLogicalMessageContext(NServiceBus.IMessageCreator messageCreator = null) { }
        public System.Collections.Generic.Dictionary<string, string> Headers { get; set; }
        public NServiceBus.Pipeline.LogicalMessage Message { get; set; }
        public bool MessageHandled { get; set; }
        public virtual void UpdateMessageInstance(object newInstance) { }
    }
    public class TestableIncomingPhysicalMessageContext : NServiceBus.Testing.TestableIncomingContext, NServiceBus.Extensibility.IExtendable, NServiceBus.ICancellableContext, NServiceBus.IMessageProcessingContext, NServiceBus.IPipelineContext, NServiceBus.Pipeline.IBehaviorContext, NServiceBus.Pipeline.IIncomingContext, NServiceBus.Pipeline.IIncomingPhysicalMessageContext
    {
        public TestableIncomingPhysicalMessageContext() { }
        public NServiceBus.Transport.IncomingMessage Message { get; set; }
        public virtual void UpdateMessage(byte[] body) { }
    }
    public class TestableInvokeHandlerContext : NServiceBus.Testing.TestableIncomingContext, NServiceBus.Extensibility.IExtendable, NServiceBus.ICancellableContext, NServiceBus.IMessageHandlerContext, NServiceBus.IMessageProcessingContext, NServiceBus.IPipelineContext, NServiceBus.Pipeline.IBehaviorContext, NServiceBus.Pipeline.IIncomingContext, NServiceBus.Pipeline.IInvokeHandlerContext
    {
        public TestableInvokeHandlerContext(NServiceBus.IMessageCreator messageCreator = null) { }
        public bool DoNotContinueDispatchingCurrentMessageToHandlersWasCalled { get; set; }
        public bool HandlerInvocationAborted { get; }
        public System.Collections.Generic.Dictionary<string, string> Headers { get; set; }
        public object MessageBeingHandled { get; set; }
        public NServiceBus.Pipeline.MessageHandler MessageHandler { get; set; }
        public NServiceBus.Unicast.Messages.MessageMetadata MessageMetadata { get; set; }
        public NServiceBus.Persistence.SynchronizedStorageSession SynchronizedStorageSession { get; set; }
        public void DoNotContinueDispatchingCurrentMessageToHandlers() { }
    }
    public class TestableMessageHandlerContext : NServiceBus.Testing.TestableInvokeHandlerContext
    {
        public TestableMessageHandlerContext(NServiceBus.IMessageCreator messageCreator = null) { }
    }
    public class TestableMessageProcessingContext : NServiceBus.Testing.TestablePipelineContext, NServiceBus.Extensibility.IExtendable, NServiceBus.ICancellableContext, NServiceBus.IMessageProcessingContext, NServiceBus.IPipelineContext
    {
        public TestableMessageProcessingContext(NServiceBus.IMessageCreator messageCreator = null) { }
        public virtual string[] ForwardedMessages { get; }
        public System.Collections.Generic.IDictionary<string, string> MessageHeaders { get; set; }
        public string MessageId { get; set; }
        public virtual NServiceBus.Testing.RepliedMessage<>[] RepliedMessages { get; }
        public string ReplyToAddress { get; set; }
        public virtual System.Threading.Tasks.Task ForwardCurrentMessageTo(string destination) { }
        public virtual System.Threading.Tasks.Task Reply(object message, NServiceBus.ReplyOptions options) { }
        public virtual System.Threading.Tasks.Task Reply<T>(System.Action<T> messageConstructor, NServiceBus.ReplyOptions options) { }
    }
    public class TestableMessageSession : NServiceBus.Testing.TestablePipelineContext, NServiceBus.IMessageSession
    {
        public TestableMessageSession() { }
        public virtual NServiceBus.Testing.Subscription[] Subscriptions { get; }
        public virtual NServiceBus.Testing.Unsubscription[] Unsubscription { get; }
        public System.Threading.Tasks.Task Publish(object message, NServiceBus.PublishOptions publishOptions, System.Threading.CancellationToken cancellationToken = default) { }
        public System.Threading.Tasks.Task Publish<T>(System.Action<T> messageConstructor, NServiceBus.PublishOptions publishOptions, System.Threading.CancellationToken cancellationToken = default) { }
        public System.Threading.Tasks.Task Send(object message, NServiceBus.SendOptions sendOptions, System.Threading.CancellationToken cancellationToken = default) { }
        public System.Threading.Tasks.Task Send<T>(System.Action<T> messageConstructor, NServiceBus.SendOptions sendOptions, System.Threading.CancellationToken cancellationToken = default) { }
        public virtual System.Threading.Tasks.Task Subscribe(System.Type eventType, NServiceBus.SubscribeOptions options, System.Threading.CancellationToken cancellationToken = default) { }
        public virtual System.Threading.Tasks.Task Unsubscribe(System.Type eventType, NServiceBus.UnsubscribeOptions options, System.Threading.CancellationToken cancellationToken = default) { }
    }
    public class TestableOutgoingContext : NServiceBus.Testing.TestablePipelineContext, NServiceBus.Extensibility.IExtendable, NServiceBus.ICancellableContext, NServiceBus.IPipelineContext, NServiceBus.Pipeline.IBehaviorContext, NServiceBus.Pipeline.IOutgoingContext
    {
        public TestableOutgoingContext() { }
        public System.Collections.Generic.Dictionary<string, string> Headers { get; set; }
        public string MessageId { get; set; }
        public Microsoft.Extensions.DependencyInjection.IServiceCollection ServiceCollection { get; set; }
        protected virtual System.IServiceProvider GetBuilder() { }
    }
    public class TestableOutgoingLogicalMessageContext : NServiceBus.Testing.TestableOutgoingContext, NServiceBus.Extensibility.IExtendable, NServiceBus.ICancellableContext, NServiceBus.IPipelineContext, NServiceBus.Pipeline.IBehaviorContext, NServiceBus.Pipeline.IOutgoingContext, NServiceBus.Pipeline.IOutgoingLogicalMessageContext
    {
        public TestableOutgoingLogicalMessageContext() { }
        public NServiceBus.Pipeline.OutgoingLogicalMessage Message { get; set; }
        public System.Collections.Generic.IReadOnlyCollection<NServiceBus.Routing.RoutingStrategy> RoutingStrategies { get; set; }
        public virtual void UpdateMessage(object newInstance) { }
    }
    public class TestableOutgoingPhysicalMessageContext : NServiceBus.Testing.TestableOutgoingContext, NServiceBus.Extensibility.IExtendable, NServiceBus.ICancellableContext, NServiceBus.IPipelineContext, NServiceBus.Pipeline.IBehaviorContext, NServiceBus.Pipeline.IOutgoingContext, NServiceBus.Pipeline.IOutgoingPhysicalMessageContext
    {
        public TestableOutgoingPhysicalMessageContext() { }
        public byte[] Body { get; set; }
        public System.Collections.Generic.IReadOnlyCollection<NServiceBus.Routing.RoutingStrategy> RoutingStrategies { get; set; }
        public virtual void UpdateMessage(byte[] body) { }
    }
    public class TestableOutgoingPublishContext : NServiceBus.Testing.TestableOutgoingContext, NServiceBus.Extensibility.IExtendable, NServiceBus.ICancellableContext, NServiceBus.IPipelineContext, NServiceBus.Pipeline.IBehaviorContext, NServiceBus.Pipeline.IOutgoingContext, NServiceBus.Pipeline.IOutgoingPublishContext
    {
        public TestableOutgoingPublishContext() { }
        public NServiceBus.Pipeline.OutgoingLogicalMessage Message { get; set; }
    }
    public class TestableOutgoingReplyContext : NServiceBus.Testing.TestableOutgoingContext, NServiceBus.Extensibility.IExtendable, NServiceBus.ICancellableContext, NServiceBus.IPipelineContext, NServiceBus.Pipeline.IBehaviorContext, NServiceBus.Pipeline.IOutgoingContext, NServiceBus.Pipeline.IOutgoingReplyContext
    {
        public TestableOutgoingReplyContext() { }
        public NServiceBus.Pipeline.OutgoingLogicalMessage Message { get; set; }
    }
    public class TestableOutgoingSendContext : NServiceBus.Testing.TestableOutgoingContext, NServiceBus.Extensibility.IExtendable, NServiceBus.ICancellableContext, NServiceBus.IPipelineContext, NServiceBus.Pipeline.IBehaviorContext, NServiceBus.Pipeline.IOutgoingContext, NServiceBus.Pipeline.IOutgoingSendContext
    {
        public TestableOutgoingSendContext() { }
        public NServiceBus.Pipeline.OutgoingLogicalMessage Message { get; set; }
    }
    public class TestablePipelineContext : NServiceBus.Extensibility.IExtendable, NServiceBus.ICancellableContext, NServiceBus.IPipelineContext
    {
        protected NServiceBus.IMessageCreator messageCreator;
        public TestablePipelineContext(NServiceBus.IMessageCreator messageCreator = null) { }
        public System.Threading.CancellationToken CancellationToken { get; set; }
        public NServiceBus.Extensibility.ContextBag Extensions { get; set; }
        public virtual NServiceBus.Testing.PublishedMessage<>[] PublishedMessages { get; }
        public virtual NServiceBus.Testing.SentMessage<>[] SentMessages { get; }
        public NServiceBus.Testing.TimeoutMessage<>[] TimeoutMessages { get; }
        public virtual System.Threading.Tasks.Task Publish(object message, NServiceBus.PublishOptions options) { }
        public virtual System.Threading.Tasks.Task Publish<T>(System.Action<T> messageConstructor, NServiceBus.PublishOptions publishOptions) { }
        public virtual System.Threading.Tasks.Task Send(object message, NServiceBus.SendOptions options) { }
        public virtual System.Threading.Tasks.Task Send<T>(System.Action<T> messageConstructor, NServiceBus.SendOptions options) { }
    }
    public class TestableRoutingContext : NServiceBus.Testing.TestableBehaviorContext, NServiceBus.Extensibility.IExtendable, NServiceBus.ICancellableContext, NServiceBus.Pipeline.IBehaviorContext, NServiceBus.Pipeline.IRoutingContext
    {
        public TestableRoutingContext() { }
        public NServiceBus.Transport.OutgoingMessage Message { get; set; }
        public System.Collections.Generic.IReadOnlyCollection<NServiceBus.Routing.RoutingStrategy> RoutingStrategies { get; set; }
    }
    public class TestableSubscribeContext : NServiceBus.Testing.TestableBehaviorContext, NServiceBus.Extensibility.IExtendable, NServiceBus.ICancellableContext, NServiceBus.Pipeline.IBehaviorContext, NServiceBus.Pipeline.ISubscribeContext
    {
        public TestableSubscribeContext() { }
        public System.Type EventType { get; set; }
        public System.Type[] EventTypes { get; set; }
    }
    public class TestableTransportReceiveContext : NServiceBus.Testing.TestableBehaviorContext, NServiceBus.Extensibility.IExtendable, NServiceBus.ICancellableContext, NServiceBus.Pipeline.IBehaviorContext, NServiceBus.Pipeline.ITransportReceiveContext
    {
        public TestableTransportReceiveContext() { }
        public NServiceBus.Transport.IncomingMessage Message { get; set; }
        public bool ReceiveOperationAborted { get; set; }
        public virtual void AbortReceiveOperation() { }
    }
    public class TestableUnsubscribeContext : NServiceBus.Testing.TestableBehaviorContext, NServiceBus.Extensibility.IExtendable, NServiceBus.ICancellableContext, NServiceBus.Pipeline.IBehaviorContext, NServiceBus.Pipeline.IUnsubscribeContext
    {
        public TestableUnsubscribeContext() { }
        public System.Type EventType { get; set; }
    }
    public class TestingLoggerFactory : NServiceBus.Logging.LoggingFactoryDefinition
    {
        public TestingLoggerFactory() { }
        public System.IDisposable BeginScope(System.IO.TextWriter writer, NServiceBus.Logging.LogLevel level = 0) { }
        protected override NServiceBus.Logging.ILoggerFactory GetLoggingFactory() { }
        public void Level(NServiceBus.Logging.LogLevel level) { }
        public void WriteTo(System.IO.TextWriter writer) { }
    }
    public class TimeoutMessage<TMessage> : NServiceBus.Testing.OutgoingMessage<TMessage, NServiceBus.SendOptions>
    {
        public TimeoutMessage(TMessage message, NServiceBus.SendOptions options, System.DateTimeOffset at) { }
        public TimeoutMessage(TMessage message, NServiceBus.SendOptions options, System.TimeSpan within) { }
        public System.DateTimeOffset? At { get; }
        public System.TimeSpan? Within { get; }
    }
    public class Unsubscription : NServiceBus.Testing.OutgoingMessage<System.Type, NServiceBus.UnsubscribeOptions>
    {
        public Unsubscription(System.Type message, NServiceBus.UnsubscribeOptions options) { }
    }
}